#!/bin/bash

# Used an article and associated git repo as guide and starting point.
# Article: https://www.altoros.com/blog/kubernetes-networking-writing-your-own-simple-cni-plug-in-with-bash/
# git: https://github.com/s-matyukevich/bash-cni-plugin/blob/master/bash-cni


exec 3>&1 # make stdout available as fd 3 for the result
exec &>> /var/log/nppnet.log


# Parameters:
# CNI_COMMAND
# CNI_CONTAINERID
# CNI_NETNS
# CNI_IFNAME
# CNI_ARGS
# CNI_PATH

#echo "CNI command: $CNI_COMMAND" 
echo "CNI_COMMAND: $CNI_COMMAND, CNI_CONTAINERID: $CNI_CONTAINERID, CNI_NETNS: $CNI_NETNS, CNI_IFNAME: $CNI_IFNAME, CNI_ARGS: $CNI_ARGS, CNI_PATH: $CNI_PATH"

stdin=`cat /dev/stdin`
echo "stdin: $stdin"

# ADD, DEL, VERSION in 0.3.1 spec

case $CNI_COMMAND in
ADD)

   # Config specifies first 2 bytes of IP address (specific to network), and third byte (specific to this node).
   # e.g., Pod IP = 10.244.1.3
   # subnet_network: 10.244
   # nubnet_node: 1
   # gw will be 10.244.1.1

   #network=$(echo "$stdin" | jq -r ".network")
   subnet_network=$(echo "$stdin" | jq -r ".subnet_network")
   subnet_node=$(echo "$stdin" | jq -r ".subnet_node")

   # Allocate IP address - start at 2
   if ! [ -f /tmp/npp-nextip ]; then
      echo "Creating /tmp/npp-nextip"
      echo "2" > /tmp/npp-nextip
   fi

   # read /tmp/npp-nextip 
   ip=$(cat /tmp/npp-nextip)
   nextip=$((ip+1))
   echo $nextip > /tmp/npp-nextip

   echo "IP: $ip"

   container_ip="$subnet_network.$subnet_node.$ip"   
   gw_ip="$subnet_network.$subnet_node.1"

   echo "Container IP: $container_ip, GW_IP: $gw_ip"

   # /var/run/netns/  
   mkdir -p /var/run/netns/
   ln -sfT $CNI_NETNS /var/run/netns/$CNI_CONTAINERID

   # Create veth pair
   rand=$(tr -dc 'A-F0-9' < /dev/urandom | head -c4)
   host_if_name="vethHost$rand"
   cont_if_name="vethCont$rand"

   echo "veth: $host_if_name, $cont_if_name"

   ip link add $cont_if_name type veth peer name $host_if_name 


   # attach to bridge 
   echo "attach to bridge"
   ip link set $host_if_name up
   ip link set $host_if_name master cni0


   ip link

   # Put veth into namespace
   echo "put in namespace $cont_if_name   $CNI_CONTAINERID"
   ip link set $cont_if_name netns $CNI_CONTAINERID

   # Set up networking within the namespace (address, route)
   echo "set up networking"
   ip netns exec $CNI_CONTAINERID ip link set dev $cont_if_name name $CNI_IFNAME
   ip netns exec $CNI_CONTAINERID ip link set dev $CNI_IFNAME up
   ip netns exec $CNI_CONTAINERID ip addr add $container_ip/24 dev $CNI_IFNAME
   ip netns exec $CNI_CONTAINERID ip route add default via $gw_ip dev $CNI_IFNAME

   mac=$(ip netns exec $CNI_CONTAINERID ip link show $CNI_IFNAME | awk '/ether/ {print $2}')

echo "{
  \"cniVersion\": \"0.3.1\",
  \"interfaces\": [                                            
      {
          \"name\": \"eth0\",
          \"mac\": \"$mac\",                            
          \"sandbox\": \"$CNI_NETNS\" 
      }
  ],
  \"ips\": [
      {
          \"version\": \"4\",
          \"address\": \"$container_ip/24\",
          \"gateway\": \"$gw_ip\",          
          \"interface\": 0 
      }
  ]
}" >&3



   # NAT (for external) - TODO in future

   ;;

DEL)

   echo "Nothing to do - DEL"

   ;;

VERSION)

echo '{
  "cniVersion": "0.3.1", 
  "supportedVersions": [ "0.3.0", "0.3.1" ] 
}' >&3

   ;;

esac


